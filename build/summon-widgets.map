{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","widgets/progress-bar/styles.js","widgets/progress-bar/template.js","widgets/progress-bar/progress.service.js","utils.js","widgets/progress-bar/event-queue.js","widgets/progress-bar/progress-bar.js","widgets/progress-bar/index.js","widgets/index.js","browser.js"],"names":["styles","modalBackgroundColor","contentBackgroundColor","borderColor","borderLightColor","contentBorder","headerBorder","modalShadow","themeColor","maxModalWidth","progressColor","progressBarColor","progressBarHeight","errorTextColor","templateString","getStatus","statusApi","fetch","response","json","hasOwnProperty","Promise","reject","resolve","noop","parseTemplateString","str","replacements","replace","match","$1","EventQueue","duration","dequeueCb","_events","_intervalId","events","isDequeuing","isEmpty","intervalId","setInterval","clearInterval","dequeue","event","shift","length","value","ProgressBar","POLL_INTERVAL","EVENT_QUEUE_TIME","options","jobId","source","attachShadow","mode","shadowRoot","innerHTML","html","_progress","eventQueue","HTMLElement","error","message","init","eventDequeueCb","bind","initUi","querySelector","addEventListener","onTrigger","progressBar","progressStatus","getElementById","toggleModal","progress","poll","classList","toggle","statusSource","then","status","percent","maxProgress","enqueue","console","getErrorMessage","finally","setTimeout","getAttribute","Error","style","width","contains","window","SummonWidgets"],"mappings":"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","file":"summon-widgets.map","sourceRoot":"..\\src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","const modalBackgroundColor = `rgba(0,0,0,0.4);`; /* Black w/ opacity */\nconst contentBackgroundColor = `#fefefe`;\nconst borderColor = `#888`;\nconst borderLightColor = `rgba(8, 8, 8, 0.3)`;\nconst contentBorder = `1px solid ${borderColor};`;\nconst headerBorder = `1px solid ${borderLightColor}`;\nconst modalShadow = ` 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)`;\n\n// Color which will be used as background for header and footer of modal.\nconst themeColor = `#5cb85c`;\n\nconst maxModalWidth = '800px';\n\nconst progressColor = '#f1f1f1';\nconst progressBarColor = '#2196F3';\nconst progressBarHeight = '24px';\n\nconst errorTextColor = '#f44336';\n\nconst styles = `\n\n/* Center aligns text */\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    padding-top: 100px; /* Location of the box */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: ${modalBackgroundColor}\n}\n\n/* Modal Content */\n.modal-content {\n    position: relative;\n    background-color: ${contentBackgroundColor};\n    margin: auto;\n    padding: 0;\n    border: ${contentBorder};\n    border-radius: 5px;\n    width: 80%;\n    max-width: ${maxModalWidth};\n    box-shadow: ${modalShadow};\n    -webkit-animation-name: animateTop;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animateTop;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animateTop {\n    from {\n        top:-300px;\n        opacity:0;\n    } \n    to {\n        top:0;\n        opacity:1\n    }\n}\n\n@keyframes animateTop {\n    from {\n        top:-300px; \n        opacity:0\n    }\n    to {\n        top:0;\n        opacity:1\n    }\n}\n\n/* The Close Button */\n.close {\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-open {\n    display: block;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    border-bottom: ${headerBorder};\n}\n\n.modal-body {\n    padding: 2px 16px;\n}\n\n.modal-footer {\n    padding: 2px 16px;\n}\n\n/* Progress bar related styles */\n.progress {\n    background-color: ${progressColor};\n    width: 100%;\n    margin: 20px 0;\n}\n\n.progress-bar {\n    width: 0;\n    height: ${progressBarHeight};\n    background-color: ${progressBarColor};\n    text-align: center;\n    transition: width 0.5s ease-in-out;\n}\n\n.progress-status {\n    color: white;\n    display: inline-block;\n    margin-top: 3px;\n}\n\n.text-error {\n    color: ${errorTextColor};\n}\n`;\n\nexport default styles;\n","import styles from './styles';\n\nconst templateString = `\n<style>\n    ${styles}\n</style>\n<!-- Trigger button/Opens the modal -->\n<button class=\"trigger\">Show progress</button>\n\n<!-- The Modal -->\n<div id=\"modal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <span class=\"close\">&times;</span>\n      <h2>Modal Header</h2>\n    </div>\n    <div class=\"modal-body\">\n      <h4>\n        Progress\n      </h4>\n      <p id=\"message\"></p>\n      <div class=\"progress\">\n        <div class=\"progress-bar\"><span class=\"progress-status\" id=\"progressStatus\"></span></div>\n      </div>\n    </div>\n  </div>\n\n</div>\n`;\n\nexport default templateString;\n","/**\n * Fetches the status from the status api.\n * @param {*} statusApi\n */\nexport const getStatus = async (statusApi) => {\n  const response = await fetch(statusApi);\n  const json = await response.json();\n\n  return (await json.hasOwnProperty('error'))\n    ? Promise.reject(json)\n    : Promise.resolve(json);\n};\n\nexport default { getStatus };\n","export const noop = () => {};\n\n/**\n * Parses a template string.\n * eg.\n * str -> /some/api/{id}/path\n * replacements -> {id: 3}\n * output -> /some/api/{id}/path\n * @param {*} str\n * @param {*} replacements\n */\nexport const parseTemplateString = (str, replacements = {}) => {\n  const PLACEHOLDER_REGEX = /\\{(.+?)\\}/g;\n  return str.replace(PLACEHOLDER_REGEX, (match, $1) => replacements[$1] || $1);\n};\n\nexport default { noop, parseTemplateString };\n","import { noop } from '../../utils';\n/**\n * An event queue which enqueue and dequeue events with a duration.\n *\n * @class EventQueue\n */\nexport default class EventQueue {\n  /**\n   * EventQueue constructor.\n   * @param {*} duration minimum time for the event to be in queue.\n   * @param {*} dequeueCb callback invoked when an event is dequeued.\n   */\n  constructor(duration = 100, dequeueCb = noop) {\n    this.duration = duration;\n    this.dequeueCb = dequeueCb;\n\n    this._events = [];\n    this._intervalId = null;\n  }\n\n  /**\n   *\n   *\n   * @readonly\n   * @memberof EventQueue\n   */\n  get isEmpty() {\n    return this._events.length === 0;\n  }\n\n  /**\n   * Returns true if queue is dequeuing.\n   *\n   * @readonly\n   * @memberof EventQueue\n   */\n  get isDequeuing() {\n    return this.intervalId !== null;\n  }\n\n  /**\n   *\n   *\n   * @memberof EventQueue\n   */\n  get intervalId() {\n    return this._intervalId;\n  }\n\n  /**\n   *\n   *\n   * @memberof EventQueue\n   */\n  set intervalId(value) {\n    this._intervalId = value;\n  }\n\n  /**\n   *\n   *\n   * @param {*} events\n   * @memberof EventQueue\n   */\n  enqueue(events) {\n    this._events = [...this._events, ...events];\n\n    if (this.isDequeuing || this.isEmpty) {\n      return;\n    }\n\n    this.intervalId = setInterval(() => {\n      if (this.isEmpty) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n        return;\n      }\n      this.dequeue();\n    }, this.duration);\n  }\n\n  /**\n   *\n   */\n  dequeue() {\n    const event = this._events.shift();\n    this.dequeueCb(event);\n    return event;\n  }\n}\n","import html from './template';\nimport { getStatus } from './progress.service';\nimport EventQueue from './event-queue';\nimport { parseTemplateString } from '../../utils';\n\n/**\n * Interval at which status is fetched.\n */\nconst POLL_INTERVAL = 1000; // in ms\n\n/**\n * Minimum time for an event to be in the queue.\n */\nconst EVENT_QUEUE_TIME = 100; // in ms\n\n/**\n * Attributes which we'll be provided by consumer.\n */\nconst options = {\n  jobId: 'job-id',\n  source: 'source'\n};\n\nclass ProgressBar extends HTMLElement {\n  constructor() {\n    super();\n\n    // Attaching a shadow root.\n    this.attachShadow({ mode: 'open' });\n\n    // Providing HTML to shadow root.\n    this.shadowRoot.innerHTML = html;\n\n    this._progress = 0;\n\n    this.options = null;\n\n    this.eventQueue = null;\n  }\n\n  get statusSource() {\n    const source = this.getAttribute(options.source);\n    if (source === null) {\n      throw new Error('No source provided for status.');\n    }\n\n    const jobId = this.getAttribute(options.jobId);\n    return parseTemplateString(source, { [options.jobId]: jobId });\n  }\n\n  /**\n   * Status/event message which will be displayed to the user.\n   *\n   * @memberof ProgressBar\n   */\n  set message(value) {\n    this.shadowRoot.getElementById('message').innerHTML = value;\n  }\n\n  /**\n   * Sets the progress.\n   *\n   * @memberof ProgressBar\n   */\n  set progress(value) {\n    this._progress = value;\n    value = `${value}%`;\n    this.progressBar.style.width = value;\n    this.progressStatus.innerHTML = value;\n  }\n\n  /**\n   *\n   *\n   * @readonly\n   * @memberof ProgressBar\n   */\n  get maxProgress() {\n    return 100;\n  }\n\n  /**\n   *\n   *\n   * @memberof ProgressBar\n   */\n  get progress() {\n    return this._progress;\n  }\n\n  get isModalOpen() {\n    return this.shadowRoot\n      .getElementById('modal')\n      .classList.contains('modal-open');\n  }\n\n  getErrorMessage(error = {}) {\n    const message =\n      error.message || 'Something is not right. Will retry in sometimes.';\n    return `<span class=\"text-error\">${message}</span>`;\n  }\n\n  /**\n   * Invoked when element is inserted to DOM.\n   *\n   * @memberof ProgressBar\n   */\n  connectedCallback() {\n    this.init();\n    this.eventQueue = new EventQueue(\n      EVENT_QUEUE_TIME,\n      this.eventDequeueCb.bind(this)\n    );\n  }\n\n  init() {\n    this.initUi();\n  }\n\n  initUi() {\n    const trigger = this.shadowRoot.querySelector('.trigger');\n    trigger.addEventListener('click', () => this.onTrigger());\n\n    this.progressBar = this.shadowRoot.querySelector('.progress-bar');\n    this.progressStatus = this.shadowRoot.getElementById('progressStatus');\n\n    this.shadowRoot\n      .querySelector('.close')\n      .addEventListener('click', () => this.toggleModal());\n\n    this.progress = 0;\n\n    // TODO: Handle outside click to dismiss modal.\n    // // When the user clicks anywhere outside of the modal, close it\n    // window.onclick = (event) => {\n    //     if (event.target == modal) {\n    //         this.hideModal();\n    //     }\n    // }\n  }\n\n  onTrigger() {\n    this.toggleModal();\n    this.poll();\n  }\n\n  toggleModal() {\n    return this.shadowRoot\n      .getElementById('modal')\n      .classList.toggle('modal-open');\n  }\n\n  poll() {\n    getStatus(this.statusSource)\n      .then(\n        (status) => {\n          const percent =\n            status.percent >= this.maxProgress\n              ? this.maxProgress\n              : status.percent;\n          this.progress = percent;\n\n          this.eventQueue.enqueue(status.events);\n\n          if (percent === this.maxProgress) {\n            this.message = 'Completed.';\n          }\n        },\n        (error) => {\n          console.error(error);\n          this.message = this.getErrorMessage(error);\n        }\n      )\n      .finally(() => {\n        if (this.progress === this.maxProgress) {\n          // Completed.\n          return;\n        }\n        setTimeout(() => this.poll(), POLL_INTERVAL);\n      });\n  }\n\n  eventDequeueCb(event) {\n    this.message = event.message;\n  }\n}\n\nexport default ProgressBar;\n","import ProgressBar from './progress-bar';\n\nexport default ProgressBar;\n","import ProgressBar from './progress-bar';\n\nexport default {\n  ProgressBar\n};\n","// Pollyfill for async await.\n\nimport 'regenerator-runtime/runtime';\n\nimport SummonWidgets from './widgets';\n\n// Registering widget to `window` object so they can be accessed in browser.\n(($window) => {\n  $window.SummonWidgets = SummonWidgets;\n})(window);\n"]}